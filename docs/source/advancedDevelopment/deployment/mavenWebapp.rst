.. _advancedDevelopmentDeploymentMavenMavenWebapp:

Maven webapp
============

Maven webapplications are usually not executed by starting the JVM directly. Instead, an application server like Apache Tomcat is started in which webapplications are deployed. An application server provides services to operators who want to configure webapplications without rebuilding them.

Webapplications do network communication using the Hypertext Transfer Protocol (HTTP). First, update the ``Main`` class of subsection :ref:`advancedDevelopmentDeploymentMavenMavenBasics` to talk HTTP:

#. Undo the changes of subsection :ref:`advancedDevelopmentDeploymentMavenExecuteJar` by restoring the copy you made at the beginning of that subsection.
#. Change file ``work/src/main/java/org/wearefrank/maven/webapp/example/Main.java`` to become as follows:

   .. literalinclude:: ../../../../srcSteps/mavenWebapp/v520/src/main/java/org/wearefrank/maven/webapp/example/Main.java

#. Link this servlet to the URL that should trigger it. Do so by creating file ``work/src/main/webapp/WEB-INF/web.xml`` and give it the following contents:

   .. literalinclude:: ../../../../srcSteps/mavenWebapp/v520/src/main/webapp/WEB-INF/web.xml
      :language: XML

Next, the ``pom.xml`` is updated:

4. Update ``work/pom.xml`` to tell Maven that a ``.war`` file should be produced. Unlike the ``.jar`` produced in the previous subsection, the ``.war`` file includes all dependencies. Update the file as shown:

   .. include:: ../../snippets/mavenWebapp/v520/pomPackaging.txt

5. Add additional dependencies and plugins:

   .. include:: ../../snippets/mavenWebapp/v520/pomDepBuild.txt

The Java compiler has to resolve the import of class ``javax.servlet.http.HttpServlet`` and some other classes. These are found in artifact ``javax.servlet``. Therefore, this artifact is added as a dependency. The artifat does not have to be packaged in the ``.war`` however, because every application server should provide the classes of this artifact. This common feature of application servers is required by the `Jakarta EE Servlet specification <https://jakarta.ee/specifications/servlet/>`_. It explains why there is an additional line ``<scope>provided</scope>`` in the ``pom.xml``.

During development, we want to run our webapplication from the command prompt. For this purpose, Maven plugins have been created that start an application server and run the webapplication deployed in it. The ``jetty-maven-plugin`` uses the application server Jetty. We gain access to this plugin by adding it to the ``pom.xml``. Most developers prefer to use their Integrated Development Environment (IDE), for example Eclipse or IntelliJ IDEA, to run their webapplication. In Eclipse (and probably also IntelliJ IDEA, but the author did not test that), you can configure an applications server along with configuration settings to apply. This way, you can start your webapplication from a graphical user interface. You do not need a Maven plugin for this anymore. If you use Eclipse, you may experience errors that are hard to debug. Eclipse, Apache Tomcat and Maven do not cooperate perfectly. In this case, it may be helpful to have the command prompt and the ``jetty-maven-plugin`` as a backup.

The webapplication is done. It can be started as follows:

6. On the command prompt, do ``mvn clean install jetty:run``.
#. Open a webbrowser and type ``localhost:8080/api/hello`` in the address bar. This should produce a webpage with the text ``HELLO WORLD!``, the output from the servlet in class ``Main.java``. The number ``8080`` is the port number. The URL ``/api/hello`` has been configured in ``web.xml`` by tag ``<url-pattern>``.
#. Browse to ``localhost:8080``. A directory listing should appear. This is a webpage that has been generated by Jetty.
#. Without stopping Maven, create file ``work/src/main/webapp/index.html`` and give it the following contents:

   .. literalinclude:: ../../../../srcSteps/mavenWebapp/v520/src/main/webapp/index.html
      :language: none

#. Press F5 in your webbrowser. The text should change to "Hello World" in a large font.

In the previous steps, static HTML has been added to the webapp. Static HTML is transferred to the webbrowser as-is, without modification by the application server or by Java code deployed on it. Static files can also include JavaScript code that is executed by the webbrowser. Maven expects static files in directory ``src/main/webapp`` and its subdirectories. An exception is directory ``src/main/webapp/WEB-INF`` that does not include static files. It includes ``web.xml``, the file that links servlets to URLs.

The instructions asked not to stop the application server while adding ``index.html``. It was demonstrated that front-end code can be edited without restarting Jetty. This is very helpful during development.
